// license:BSD-3-Clause
// copyright-holders:FIND
////////////////////////////////////////////////////////////////////////////////////////////////////
//
// class FddSystem
// FDDシステムクラス
//
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "FddSystem.h"
#include "JRSystem.h"
#include "VJR200.h"

extern JRSystem sys;

const float FddSystem::LEDON_TIME = 0.2f;

CDiskImageCollection FddSystem::d88files;
std::set<CX88DiskImageMemory> FddSystem::m_setX88DiskImageMemory;

FddSystem::FddSystem()
{
	pFdc = new CPC88Fdc( );
	pFdc->Initialize();
	pFdc->SetIntVectChangeCallback(IntVectChangeSub);

	CDiskImageFile::SetDiskImageFileOpenCallback(DiskImageFileOpen);
	CDiskImageFile::SetDiskImageFileCloseCallback(DiskImageFileClose);

	reg10 = 0;
}


FddSystem::~FddSystem()
{
	d88files.clear();
	delete pFdc;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// リセット
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void FddSystem::Reset()
{
	pFdc->Reset();
	reg10 = 0;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FDC割り込みコールバック関数
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void FddSystem::IntVectChangeSub()
{
	if (sys.pFddSystem->pFdc->IsFdcInterruptRequest())
		sys.pMn1271->AssertIrq((int)(IrqType::SYSINT));
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 読み出し（デバッグ用）
//
////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t FddSystem::ReadForDebug(int r)
{
	uint8_t d = 0;

	switch (r)
	{
	case 0:
		d = pFdc->ReadStatusReg();
		break;
	case 1:
		d = 0;
		break;
	case 0x10:
		d = reg10 | 1;
		break;
	case 0xff:
		d = 0xff;
		break;
	default:
		d = 0xff;
		break;

	}
	return d;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 読み出し
//
////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t FddSystem::Read(int r)
{
	uint8_t d = 0;

	switch (r)
	{
	case 0:
		d = pFdc->ReadStatusReg();
		break;
	case 1:
		d = pFdc->ReadDataReg();
		break;
	case 0x10:
		d = reg10 | 1;
	
		break;
	case 0xff:
		d = 0xff;
		break;
	default:
		d = 0xff;
		break;

	}
	return d;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 書き込み
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void FddSystem::Write(int r, uint8_t b)
{
	switch (r)
	{
	case 0:
		break;
	case 1:
		pFdc->WriteDataReg(b);
		break;
	case 0x10:
		reg10 = b;
		if (b & 1) // Reset
			Reset();
		
		if (b & 2) // Terminal Count
			pFdc->TerminalCount();
		break;
	case 0xff:
		break;
	default:
		break;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// DiskImageCollection getter
//
////////////////////////////////////////////////////////////////////////////////////////////////////
CDiskImageCollection & FddSystem::GetDiskImageCollection()
{
	return d88files;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// JRのクロックをPC88のFDCクロックに変換し転送（PC88エミュレータソースを使用しているため）
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void FddSystem::TickCounter(int cycles)
{
	cycles *= 3; // JR-200のクロックをZ80 4MHz相当に変換 nClock *= 3
	sys.pFddSystem->pFdc->PassClock(cycles);

}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ディスクイメージマウント時にコールバック
//
////////////////////////////////////////////////////////////////////////////////////////////////////
int FddSystem::DiskImageFileOpen(const std::wstring& fstrFileName, bool& bReadOnly, uint8_t*& pbtData, uint32_t& dwSize)
{
	CX88DiskImageMemory dim;
	int nResult = dim.Create(fstrFileName, bReadOnly);
	if (nResult == CDiskImageFile::ERR_NOERROR) {
		bReadOnly = dim.IsReadOnly();
		pbtData = dim.GetData();
		dwSize = dim.GetSize();
		m_setX88DiskImageMemory.insert(dim);
	}
	return nResult;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ディスクイメージアンマウント時にコールバック
//
////////////////////////////////////////////////////////////////////////////////////////////////////
int FddSystem::DiskImageFileClose(uint8_t* pbtData) {
	int nResult;
	std::set<CX88DiskImageMemory>::iterator itInfo = m_setX88DiskImageMemory.find(CX88DiskImageMemory(pbtData));
	if (itInfo != m_setX88DiskImageMemory.end()) {
		nResult = (*itInfo).Flush();
		(*itInfo).Destroy();
		m_setX88DiskImageMemory.erase(itInfo);
	}
	else {
		nResult = CDiskImageFile::ERR_ERROR;
	}
	return nResult;
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// LED点灯
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void FddSystem::FDDActive(int driveNum)
{
	if (driveNum == 0) {
		bCount1On = true;
		count1 = 0;
	}
	else if (driveNum == 1){
		bCount2On = true;
		count2 = 0;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// LEDカウンタアップ
//
////////////////////////////////////////////////////////////////////////////////////////////////////
void FddSystem::CountUp()
{
	if (bCount1On) {
		count1 += (float)1 / g_refRate;
		if (count1 > LEDON_TIME) {
			count1 = 0;
			bCount1On = false;
		}
	};

	if (bCount2On) {
		count2 += (float)1 / g_refRate;
		if (count2 > LEDON_TIME) {
			count2 = 0;
			bCount2On = false;
		}
	};
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
// LED状態取得
//
////////////////////////////////////////////////////////////////////////////////////////////////////
bool FddSystem::GetFddStatus(int driveNo)
{
	bool retVal = false;
	switch (driveNo)
	{
	case 0:
		retVal = bCount1On;
		break;

	case 1:
		retVal = bCount2On;
		break;

	default:
		retVal = false;

	}
	return retVal;
}

